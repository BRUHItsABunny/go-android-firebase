// Derived from mcs.proto in chromium source code. Original license text below.

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// MCS protocol for communication between Chrome client and Mobile Connection
// Server .

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: mcs.proto

package firebase_api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MCSTag int32

const (
	MCSTag_MCS_HEARTBEAT_PING_TAG      MCSTag = 0
	MCSTag_MCS_HEARTBEAT_ACK_TAG       MCSTag = 1
	MCSTag_MCS_LOGIN_REQUEST_TAG       MCSTag = 2
	MCSTag_MCS_LOGIN_RESPONSE_TAG      MCSTag = 3
	MCSTag_MCS_CLOSE_TAG               MCSTag = 4
	MCSTag_MCS_IQ_STANZA_TAG           MCSTag = 7
	MCSTag_MCS_DATA_MESSAGE_STANZA_TAG MCSTag = 8
)

// Enum value maps for MCSTag.
var (
	MCSTag_name = map[int32]string{
		0: "MCS_HEARTBEAT_PING_TAG",
		1: "MCS_HEARTBEAT_ACK_TAG",
		2: "MCS_LOGIN_REQUEST_TAG",
		3: "MCS_LOGIN_RESPONSE_TAG",
		4: "MCS_CLOSE_TAG",
		7: "MCS_IQ_STANZA_TAG",
		8: "MCS_DATA_MESSAGE_STANZA_TAG",
	}
	MCSTag_value = map[string]int32{
		"MCS_HEARTBEAT_PING_TAG":      0,
		"MCS_HEARTBEAT_ACK_TAG":       1,
		"MCS_LOGIN_REQUEST_TAG":       2,
		"MCS_LOGIN_RESPONSE_TAG":      3,
		"MCS_CLOSE_TAG":               4,
		"MCS_IQ_STANZA_TAG":           7,
		"MCS_DATA_MESSAGE_STANZA_TAG": 8,
	}
)

func (x MCSTag) Enum() *MCSTag {
	p := new(MCSTag)
	*p = x
	return p
}

func (x MCSTag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MCSTag) Descriptor() protoreflect.EnumDescriptor {
	return file_mcs_proto_enumTypes[0].Descriptor()
}

func (MCSTag) Type() protoreflect.EnumType {
	return &file_mcs_proto_enumTypes[0]
}

func (x MCSTag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MCSTag) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MCSTag(num)
	return nil
}

// Deprecated: Use MCSTag.Descriptor instead.
func (MCSTag) EnumDescriptor() ([]byte, []int) {
	return file_mcs_proto_rawDescGZIP(), []int{0}
}

type LoginRequest_AuthService int32

const (
	LoginRequest_ANDROID_ID LoginRequest_AuthService = 2
)

// Enum value maps for LoginRequest_AuthService.
var (
	LoginRequest_AuthService_name = map[int32]string{
		2: "ANDROID_ID",
	}
	LoginRequest_AuthService_value = map[string]int32{
		"ANDROID_ID": 2,
	}
)

func (x LoginRequest_AuthService) Enum() *LoginRequest_AuthService {
	p := new(LoginRequest_AuthService)
	*p = x
	return p
}

func (x LoginRequest_AuthService) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoginRequest_AuthService) Descriptor() protoreflect.EnumDescriptor {
	return file_mcs_proto_enumTypes[1].Descriptor()
}

func (LoginRequest_AuthService) Type() protoreflect.EnumType {
	return &file_mcs_proto_enumTypes[1]
}

func (x LoginRequest_AuthService) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *LoginRequest_AuthService) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = LoginRequest_AuthService(num)
	return nil
}

// Deprecated: Use LoginRequest_AuthService.Descriptor instead.
func (LoginRequest_AuthService) EnumDescriptor() ([]byte, []int) {
	return file_mcs_proto_rawDescGZIP(), []int{6, 0}
}

type IqStanza_IqType int32

const (
	IqStanza_GET      IqStanza_IqType = 0
	IqStanza_SET      IqStanza_IqType = 1
	IqStanza_RESULT   IqStanza_IqType = 2
	IqStanza_IQ_ERROR IqStanza_IqType = 3
)

// Enum value maps for IqStanza_IqType.
var (
	IqStanza_IqType_name = map[int32]string{
		0: "GET",
		1: "SET",
		2: "RESULT",
		3: "IQ_ERROR",
	}
	IqStanza_IqType_value = map[string]int32{
		"GET":      0,
		"SET":      1,
		"RESULT":   2,
		"IQ_ERROR": 3,
	}
)

func (x IqStanza_IqType) Enum() *IqStanza_IqType {
	p := new(IqStanza_IqType)
	*p = x
	return p
}

func (x IqStanza_IqType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IqStanza_IqType) Descriptor() protoreflect.EnumDescriptor {
	return file_mcs_proto_enumTypes[2].Descriptor()
}

func (IqStanza_IqType) Type() protoreflect.EnumType {
	return &file_mcs_proto_enumTypes[2]
}

func (x IqStanza_IqType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *IqStanza_IqType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = IqStanza_IqType(num)
	return nil
}

// Deprecated: Use IqStanza_IqType.Descriptor instead.
func (IqStanza_IqType) EnumDescriptor() ([]byte, []int) {
	return file_mcs_proto_rawDescGZIP(), []int{11, 0}
}

// *
// TAG: 0
type HeartbeatPing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId             *int32 `protobuf:"varint,1,opt,name=stream_id,json=streamId" json:"stream_id,omitempty"`
	LastStreamIdReceived *int32 `protobuf:"varint,2,opt,name=last_stream_id_received,json=lastStreamIdReceived" json:"last_stream_id_received,omitempty"`
	Status               *int64 `protobuf:"varint,3,opt,name=status" json:"status,omitempty"`
}

func (x *HeartbeatPing) Reset() {
	*x = HeartbeatPing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mcs_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartbeatPing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatPing) ProtoMessage() {}

func (x *HeartbeatPing) ProtoReflect() protoreflect.Message {
	mi := &file_mcs_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatPing.ProtoReflect.Descriptor instead.
func (*HeartbeatPing) Descriptor() ([]byte, []int) {
	return file_mcs_proto_rawDescGZIP(), []int{0}
}

func (x *HeartbeatPing) GetStreamId() int32 {
	if x != nil && x.StreamId != nil {
		return *x.StreamId
	}
	return 0
}

func (x *HeartbeatPing) GetLastStreamIdReceived() int32 {
	if x != nil && x.LastStreamIdReceived != nil {
		return *x.LastStreamIdReceived
	}
	return 0
}

func (x *HeartbeatPing) GetStatus() int64 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

// *
// TAG: 1
type HeartbeatAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId             *int32 `protobuf:"varint,1,opt,name=stream_id,json=streamId" json:"stream_id,omitempty"`
	LastStreamIdReceived *int32 `protobuf:"varint,2,opt,name=last_stream_id_received,json=lastStreamIdReceived" json:"last_stream_id_received,omitempty"`
	Status               *int64 `protobuf:"varint,3,opt,name=status" json:"status,omitempty"`
}

func (x *HeartbeatAck) Reset() {
	*x = HeartbeatAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mcs_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartbeatAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatAck) ProtoMessage() {}

func (x *HeartbeatAck) ProtoReflect() protoreflect.Message {
	mi := &file_mcs_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatAck.ProtoReflect.Descriptor instead.
func (*HeartbeatAck) Descriptor() ([]byte, []int) {
	return file_mcs_proto_rawDescGZIP(), []int{1}
}

func (x *HeartbeatAck) GetStreamId() int32 {
	if x != nil && x.StreamId != nil {
		return *x.StreamId
	}
	return 0
}

func (x *HeartbeatAck) GetLastStreamIdReceived() int32 {
	if x != nil && x.LastStreamIdReceived != nil {
		return *x.LastStreamIdReceived
	}
	return 0
}

func (x *HeartbeatAck) GetStatus() int64 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

type ErrorInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      *int32     `protobuf:"varint,1,req,name=code" json:"code,omitempty"`
	Message   *string    `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Type      *string    `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
	Extension *Extension `protobuf:"bytes,4,opt,name=extension" json:"extension,omitempty"`
}

func (x *ErrorInfo) Reset() {
	*x = ErrorInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mcs_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorInfo) ProtoMessage() {}

func (x *ErrorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mcs_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorInfo.ProtoReflect.Descriptor instead.
func (*ErrorInfo) Descriptor() ([]byte, []int) {
	return file_mcs_proto_rawDescGZIP(), []int{2}
}

func (x *ErrorInfo) GetCode() int32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *ErrorInfo) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *ErrorInfo) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *ErrorInfo) GetExtension() *Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

type Setting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Value *string `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
}

func (x *Setting) Reset() {
	*x = Setting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mcs_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Setting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Setting) ProtoMessage() {}

func (x *Setting) ProtoReflect() protoreflect.Message {
	mi := &file_mcs_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Setting.ProtoReflect.Descriptor instead.
func (*Setting) Descriptor() ([]byte, []int) {
	return file_mcs_proto_rawDescGZIP(), []int{3}
}

func (x *Setting) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Setting) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type HeartbeatStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip         *string `protobuf:"bytes,1,req,name=ip" json:"ip,omitempty"`
	Timeout    *bool   `protobuf:"varint,2,req,name=timeout" json:"timeout,omitempty"`
	IntervalMs *int32  `protobuf:"varint,3,req,name=interval_ms,json=intervalMs" json:"interval_ms,omitempty"`
}

func (x *HeartbeatStat) Reset() {
	*x = HeartbeatStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mcs_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartbeatStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatStat) ProtoMessage() {}

func (x *HeartbeatStat) ProtoReflect() protoreflect.Message {
	mi := &file_mcs_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatStat.ProtoReflect.Descriptor instead.
func (*HeartbeatStat) Descriptor() ([]byte, []int) {
	return file_mcs_proto_rawDescGZIP(), []int{4}
}

func (x *HeartbeatStat) GetIp() string {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return ""
}

func (x *HeartbeatStat) GetTimeout() bool {
	if x != nil && x.Timeout != nil {
		return *x.Timeout
	}
	return false
}

func (x *HeartbeatStat) GetIntervalMs() int32 {
	if x != nil && x.IntervalMs != nil {
		return *x.IntervalMs
	}
	return 0
}

type HeartbeatConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadStat *bool   `protobuf:"varint,1,opt,name=upload_stat,json=uploadStat" json:"upload_stat,omitempty"`
	Ip         *string `protobuf:"bytes,2,opt,name=ip" json:"ip,omitempty"`
	IntervalMs *int32  `protobuf:"varint,3,opt,name=interval_ms,json=intervalMs" json:"interval_ms,omitempty"`
}

func (x *HeartbeatConfig) Reset() {
	*x = HeartbeatConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mcs_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartbeatConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatConfig) ProtoMessage() {}

func (x *HeartbeatConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mcs_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatConfig.ProtoReflect.Descriptor instead.
func (*HeartbeatConfig) Descriptor() ([]byte, []int) {
	return file_mcs_proto_rawDescGZIP(), []int{5}
}

func (x *HeartbeatConfig) GetUploadStat() bool {
	if x != nil && x.UploadStat != nil {
		return *x.UploadStat
	}
	return false
}

func (x *HeartbeatConfig) GetIp() string {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return ""
}

func (x *HeartbeatConfig) GetIntervalMs() int32 {
	if x != nil && x.IntervalMs != nil {
		return *x.IntervalMs
	}
	return 0
}

// *
// TAG: 2
type LoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *string `protobuf:"bytes,1,req,name=id" json:"id,omitempty"` // Must be present ( proto required ), may be empty
	// string.
	// mcs.android.com.
	Domain *string `protobuf:"bytes,2,req,name=domain" json:"domain,omitempty"`
	// Decimal android ID
	User     *string `protobuf:"bytes,3,req,name=user" json:"user,omitempty"`
	Resource *string `protobuf:"bytes,4,req,name=resource" json:"resource,omitempty"`
	// Secret
	AuthToken *string `protobuf:"bytes,5,req,name=auth_token,json=authToken" json:"auth_token,omitempty"`
	// Format is: android-HEX_DEVICE_ID
	// The user is the decimal value.
	DeviceId *string `protobuf:"bytes,6,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
	// RMQ1 - no longer used
	LastRmqId            *int64     `protobuf:"varint,7,opt,name=last_rmq_id,json=lastRmqId" json:"last_rmq_id,omitempty"`
	Setting              []*Setting `protobuf:"bytes,8,rep,name=setting" json:"setting,omitempty"`
	Compress             *int32     `protobuf:"varint,9,opt,name=compress" json:"compress,omitempty"`
	ReceivedPersistentId []string   `protobuf:"bytes,10,rep,name=received_persistent_id,json=receivedPersistentId" json:"received_persistent_id,omitempty"`
	// Replaced by "rmq2v" setting
	IncludeStreamIds  *bool          `protobuf:"varint,11,opt,name=include_stream_ids,json=includeStreamIds" json:"include_stream_ids,omitempty"`
	AdaptiveHeartbeat *bool          `protobuf:"varint,12,opt,name=adaptive_heartbeat,json=adaptiveHeartbeat" json:"adaptive_heartbeat,omitempty"`
	HeartbeatStat     *HeartbeatStat `protobuf:"bytes,13,opt,name=heartbeat_stat,json=heartbeatStat" json:"heartbeat_stat,omitempty"`
	// Must be true.
	UseRmq2   *bool  `protobuf:"varint,14,opt,name=use_rmq2,json=useRmq2" json:"use_rmq2,omitempty"`
	AccountId *int64 `protobuf:"varint,15,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	// ANDROID_ID = 2
	AuthService *LoginRequest_AuthService `protobuf:"varint,16,opt,name=auth_service,json=authService,enum=LoginRequest_AuthService" json:"auth_service,omitempty"`
	NetworkType *int32                    `protobuf:"varint,17,opt,name=network_type,json=networkType" json:"network_type,omitempty"`
	Status      *int64                    `protobuf:"varint,18,opt,name=status" json:"status,omitempty"`
}

func (x *LoginRequest) Reset() {
	*x = LoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mcs_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginRequest) ProtoMessage() {}

func (x *LoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mcs_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginRequest.ProtoReflect.Descriptor instead.
func (*LoginRequest) Descriptor() ([]byte, []int) {
	return file_mcs_proto_rawDescGZIP(), []int{6}
}

func (x *LoginRequest) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *LoginRequest) GetDomain() string {
	if x != nil && x.Domain != nil {
		return *x.Domain
	}
	return ""
}

func (x *LoginRequest) GetUser() string {
	if x != nil && x.User != nil {
		return *x.User
	}
	return ""
}

func (x *LoginRequest) GetResource() string {
	if x != nil && x.Resource != nil {
		return *x.Resource
	}
	return ""
}

func (x *LoginRequest) GetAuthToken() string {
	if x != nil && x.AuthToken != nil {
		return *x.AuthToken
	}
	return ""
}

func (x *LoginRequest) GetDeviceId() string {
	if x != nil && x.DeviceId != nil {
		return *x.DeviceId
	}
	return ""
}

func (x *LoginRequest) GetLastRmqId() int64 {
	if x != nil && x.LastRmqId != nil {
		return *x.LastRmqId
	}
	return 0
}

func (x *LoginRequest) GetSetting() []*Setting {
	if x != nil {
		return x.Setting
	}
	return nil
}

func (x *LoginRequest) GetCompress() int32 {
	if x != nil && x.Compress != nil {
		return *x.Compress
	}
	return 0
}

func (x *LoginRequest) GetReceivedPersistentId() []string {
	if x != nil {
		return x.ReceivedPersistentId
	}
	return nil
}

func (x *LoginRequest) GetIncludeStreamIds() bool {
	if x != nil && x.IncludeStreamIds != nil {
		return *x.IncludeStreamIds
	}
	return false
}

func (x *LoginRequest) GetAdaptiveHeartbeat() bool {
	if x != nil && x.AdaptiveHeartbeat != nil {
		return *x.AdaptiveHeartbeat
	}
	return false
}

func (x *LoginRequest) GetHeartbeatStat() *HeartbeatStat {
	if x != nil {
		return x.HeartbeatStat
	}
	return nil
}

func (x *LoginRequest) GetUseRmq2() bool {
	if x != nil && x.UseRmq2 != nil {
		return *x.UseRmq2
	}
	return false
}

func (x *LoginRequest) GetAccountId() int64 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *LoginRequest) GetAuthService() LoginRequest_AuthService {
	if x != nil && x.AuthService != nil {
		return *x.AuthService
	}
	return LoginRequest_ANDROID_ID
}

func (x *LoginRequest) GetNetworkType() int32 {
	if x != nil && x.NetworkType != nil {
		return *x.NetworkType
	}
	return 0
}

func (x *LoginRequest) GetStatus() int64 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

// *
// TAG: 3
type LoginResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *string `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	// Not used.
	Jid *string `protobuf:"bytes,2,opt,name=jid" json:"jid,omitempty"`
	// Null if login was ok.
	Error    *ErrorInfo `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
	Setting  []*Setting `protobuf:"bytes,4,rep,name=setting" json:"setting,omitempty"`
	StreamId *int32     `protobuf:"varint,5,opt,name=stream_id,json=streamId" json:"stream_id,omitempty"`
	// Should be "1"
	LastStreamIdReceived *int32           `protobuf:"varint,6,opt,name=last_stream_id_received,json=lastStreamIdReceived" json:"last_stream_id_received,omitempty"`
	HeartbeatConfig      *HeartbeatConfig `protobuf:"bytes,7,opt,name=heartbeat_config,json=heartbeatConfig" json:"heartbeat_config,omitempty"`
	// used by the client to synchronize with the server timestamp.
	ServerTimestamp *int64 `protobuf:"varint,8,opt,name=server_timestamp,json=serverTimestamp" json:"server_timestamp,omitempty"`
}

func (x *LoginResponse) Reset() {
	*x = LoginResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mcs_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginResponse) ProtoMessage() {}

func (x *LoginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mcs_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginResponse.ProtoReflect.Descriptor instead.
func (*LoginResponse) Descriptor() ([]byte, []int) {
	return file_mcs_proto_rawDescGZIP(), []int{7}
}

func (x *LoginResponse) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *LoginResponse) GetJid() string {
	if x != nil && x.Jid != nil {
		return *x.Jid
	}
	return ""
}

func (x *LoginResponse) GetError() *ErrorInfo {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *LoginResponse) GetSetting() []*Setting {
	if x != nil {
		return x.Setting
	}
	return nil
}

func (x *LoginResponse) GetStreamId() int32 {
	if x != nil && x.StreamId != nil {
		return *x.StreamId
	}
	return 0
}

func (x *LoginResponse) GetLastStreamIdReceived() int32 {
	if x != nil && x.LastStreamIdReceived != nil {
		return *x.LastStreamIdReceived
	}
	return 0
}

func (x *LoginResponse) GetHeartbeatConfig() *HeartbeatConfig {
	if x != nil {
		return x.HeartbeatConfig
	}
	return nil
}

func (x *LoginResponse) GetServerTimestamp() int64 {
	if x != nil && x.ServerTimestamp != nil {
		return *x.ServerTimestamp
	}
	return 0
}

type StreamErrorStanza struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *string `protobuf:"bytes,1,req,name=type" json:"type,omitempty"`
	Text *string `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
}

func (x *StreamErrorStanza) Reset() {
	*x = StreamErrorStanza{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mcs_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamErrorStanza) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamErrorStanza) ProtoMessage() {}

func (x *StreamErrorStanza) ProtoReflect() protoreflect.Message {
	mi := &file_mcs_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamErrorStanza.ProtoReflect.Descriptor instead.
func (*StreamErrorStanza) Descriptor() ([]byte, []int) {
	return file_mcs_proto_rawDescGZIP(), []int{8}
}

func (x *StreamErrorStanza) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *StreamErrorStanza) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

// *
// TAG: 4
type Close struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Close) Reset() {
	*x = Close{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mcs_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Close) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Close) ProtoMessage() {}

func (x *Close) ProtoReflect() protoreflect.Message {
	mi := &file_mcs_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Close.ProtoReflect.Descriptor instead.
func (*Close) Descriptor() ([]byte, []int) {
	return file_mcs_proto_rawDescGZIP(), []int{9}
}

type Extension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 12: SelectiveAck
	// 13: StreamAck
	Id   *int32 `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	Data []byte `protobuf:"bytes,2,req,name=data" json:"data,omitempty"`
}

func (x *Extension) Reset() {
	*x = Extension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mcs_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Extension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Extension) ProtoMessage() {}

func (x *Extension) ProtoReflect() protoreflect.Message {
	mi := &file_mcs_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Extension.ProtoReflect.Descriptor instead.
func (*Extension) Descriptor() ([]byte, []int) {
	return file_mcs_proto_rawDescGZIP(), []int{10}
}

func (x *Extension) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Extension) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// *
// TAG: 7
// IqRequest must contain a single extension.  IqResponse may contain 0 or 1
// extensions.
type IqStanza struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RmqId *int64           `protobuf:"varint,1,opt,name=rmq_id,json=rmqId" json:"rmq_id,omitempty"`
	Type  *IqStanza_IqType `protobuf:"varint,2,req,name=type,enum=IqStanza_IqType" json:"type,omitempty"`
	Id    *string          `protobuf:"bytes,3,req,name=id" json:"id,omitempty"`
	From  *string          `protobuf:"bytes,4,opt,name=from" json:"from,omitempty"`
	To    *string          `protobuf:"bytes,5,opt,name=to" json:"to,omitempty"`
	Error *ErrorInfo       `protobuf:"bytes,6,opt,name=error" json:"error,omitempty"`
	// Only field used in the 38+ protocol (besides common last_stream_id_received, status, rmq_id)
	Extension            *Extension `protobuf:"bytes,7,opt,name=extension" json:"extension,omitempty"`
	PersistentId         *string    `protobuf:"bytes,8,opt,name=persistent_id,json=persistentId" json:"persistent_id,omitempty"`
	StreamId             *int32     `protobuf:"varint,9,opt,name=stream_id,json=streamId" json:"stream_id,omitempty"`
	LastStreamIdReceived *int32     `protobuf:"varint,10,opt,name=last_stream_id_received,json=lastStreamIdReceived" json:"last_stream_id_received,omitempty"`
	AccountId            *int64     `protobuf:"varint,11,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Status               *int64     `protobuf:"varint,12,opt,name=status" json:"status,omitempty"`
}

func (x *IqStanza) Reset() {
	*x = IqStanza{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mcs_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IqStanza) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IqStanza) ProtoMessage() {}

func (x *IqStanza) ProtoReflect() protoreflect.Message {
	mi := &file_mcs_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IqStanza.ProtoReflect.Descriptor instead.
func (*IqStanza) Descriptor() ([]byte, []int) {
	return file_mcs_proto_rawDescGZIP(), []int{11}
}

func (x *IqStanza) GetRmqId() int64 {
	if x != nil && x.RmqId != nil {
		return *x.RmqId
	}
	return 0
}

func (x *IqStanza) GetType() IqStanza_IqType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return IqStanza_GET
}

func (x *IqStanza) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *IqStanza) GetFrom() string {
	if x != nil && x.From != nil {
		return *x.From
	}
	return ""
}

func (x *IqStanza) GetTo() string {
	if x != nil && x.To != nil {
		return *x.To
	}
	return ""
}

func (x *IqStanza) GetError() *ErrorInfo {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *IqStanza) GetExtension() *Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *IqStanza) GetPersistentId() string {
	if x != nil && x.PersistentId != nil {
		return *x.PersistentId
	}
	return ""
}

func (x *IqStanza) GetStreamId() int32 {
	if x != nil && x.StreamId != nil {
		return *x.StreamId
	}
	return 0
}

func (x *IqStanza) GetLastStreamIdReceived() int32 {
	if x != nil && x.LastStreamIdReceived != nil {
		return *x.LastStreamIdReceived
	}
	return 0
}

func (x *IqStanza) GetAccountId() int64 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *IqStanza) GetStatus() int64 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

type AppData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *string `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Value *string `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
}

func (x *AppData) Reset() {
	*x = AppData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mcs_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppData) ProtoMessage() {}

func (x *AppData) ProtoReflect() protoreflect.Message {
	mi := &file_mcs_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppData.ProtoReflect.Descriptor instead.
func (*AppData) Descriptor() ([]byte, []int) {
	return file_mcs_proto_rawDescGZIP(), []int{12}
}

func (x *AppData) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *AppData) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

// *
// TAG: 8
type DataMessageStanza struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Not used.
	RmqId *int64 `protobuf:"varint,1,opt,name=rmq_id,json=rmqId" json:"rmq_id,omitempty"`
	// This is the message ID, set by client, DMP.9 (message_id)
	Id *string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	// Project ID of the sender, DMP.1
	From *string `protobuf:"bytes,3,req,name=from" json:"from,omitempty"`
	// Part of DMRequest - also the key in DataMessageProto.
	To *string `protobuf:"bytes,4,opt,name=to" json:"to,omitempty"`
	// Package name. DMP.2
	Category *string `protobuf:"bytes,5,req,name=category" json:"category,omitempty"`
	// The collapsed key, DMP.3
	Token *string `protobuf:"bytes,6,opt,name=token" json:"token,omitempty"`
	// User data + GOOGLE. prefixed special entries, DMP.4
	AppData []*AppData `protobuf:"bytes,7,rep,name=app_data,json=appData" json:"app_data,omitempty"`
	// Not used.
	FromTrustedServer *bool `protobuf:"varint,8,opt,name=from_trusted_server,json=fromTrustedServer" json:"from_trusted_server,omitempty"`
	// Part of the ACK protocol, returned in DataMessageResponse on server side.
	// It's part of the key of DMP.
	PersistentId *string `protobuf:"bytes,9,opt,name=persistent_id,json=persistentId" json:"persistent_id,omitempty"`
	// In-stream ack. Increments on each message sent - a bit redundant
	// Not used in DMP/DMR.
	StreamId             *int32 `protobuf:"varint,10,opt,name=stream_id,json=streamId" json:"stream_id,omitempty"`
	LastStreamIdReceived *int32 `protobuf:"varint,11,opt,name=last_stream_id_received,json=lastStreamIdReceived" json:"last_stream_id_received,omitempty"`
	// Not used.
	Permission *string `protobuf:"bytes,12,opt,name=permission" json:"permission,omitempty"`
	// Sent by the device shortly after registration.
	RegId *string `protobuf:"bytes,13,opt,name=reg_id,json=regId" json:"reg_id,omitempty"`
	// Not used.
	PkgSignature *string `protobuf:"bytes,14,opt,name=pkg_signature,json=pkgSignature" json:"pkg_signature,omitempty"`
	// Not used.
	ClientId *string `protobuf:"bytes,15,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
	// serial number of the target user, DMP.8
	// It is the 'serial number' according to user manager.
	DeviceUserId *int64 `protobuf:"varint,16,opt,name=device_user_id,json=deviceUserId" json:"device_user_id,omitempty"`
	// Time to live, in seconds.
	Ttl *int32 `protobuf:"varint,17,opt,name=ttl" json:"ttl,omitempty"`
	// Timestamp ( according to client ) when message was sent by app, in seconds
	Sent *int64 `protobuf:"varint,18,opt,name=sent" json:"sent,omitempty"`
	// How long has the message been queued before the flush, in seconds.
	// This is needed to account for the time difference between server and
	// client: server should adjust 'sent' based on his 'receive' time.
	Queued  *int32 `protobuf:"varint,19,opt,name=queued" json:"queued,omitempty"`
	Status  *int64 `protobuf:"varint,20,opt,name=status" json:"status,omitempty"`
	RawData []byte `protobuf:"bytes,21,opt,name=raw_data,json=rawData" json:"raw_data,omitempty"`
	Delay   *int32 `protobuf:"varint,22,opt,name=delay" json:"delay,omitempty"`
}

func (x *DataMessageStanza) Reset() {
	*x = DataMessageStanza{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mcs_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataMessageStanza) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataMessageStanza) ProtoMessage() {}

func (x *DataMessageStanza) ProtoReflect() protoreflect.Message {
	mi := &file_mcs_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataMessageStanza.ProtoReflect.Descriptor instead.
func (*DataMessageStanza) Descriptor() ([]byte, []int) {
	return file_mcs_proto_rawDescGZIP(), []int{13}
}

func (x *DataMessageStanza) GetRmqId() int64 {
	if x != nil && x.RmqId != nil {
		return *x.RmqId
	}
	return 0
}

func (x *DataMessageStanza) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *DataMessageStanza) GetFrom() string {
	if x != nil && x.From != nil {
		return *x.From
	}
	return ""
}

func (x *DataMessageStanza) GetTo() string {
	if x != nil && x.To != nil {
		return *x.To
	}
	return ""
}

func (x *DataMessageStanza) GetCategory() string {
	if x != nil && x.Category != nil {
		return *x.Category
	}
	return ""
}

func (x *DataMessageStanza) GetToken() string {
	if x != nil && x.Token != nil {
		return *x.Token
	}
	return ""
}

func (x *DataMessageStanza) GetAppData() []*AppData {
	if x != nil {
		return x.AppData
	}
	return nil
}

func (x *DataMessageStanza) GetFromTrustedServer() bool {
	if x != nil && x.FromTrustedServer != nil {
		return *x.FromTrustedServer
	}
	return false
}

func (x *DataMessageStanza) GetPersistentId() string {
	if x != nil && x.PersistentId != nil {
		return *x.PersistentId
	}
	return ""
}

func (x *DataMessageStanza) GetStreamId() int32 {
	if x != nil && x.StreamId != nil {
		return *x.StreamId
	}
	return 0
}

func (x *DataMessageStanza) GetLastStreamIdReceived() int32 {
	if x != nil && x.LastStreamIdReceived != nil {
		return *x.LastStreamIdReceived
	}
	return 0
}

func (x *DataMessageStanza) GetPermission() string {
	if x != nil && x.Permission != nil {
		return *x.Permission
	}
	return ""
}

func (x *DataMessageStanza) GetRegId() string {
	if x != nil && x.RegId != nil {
		return *x.RegId
	}
	return ""
}

func (x *DataMessageStanza) GetPkgSignature() string {
	if x != nil && x.PkgSignature != nil {
		return *x.PkgSignature
	}
	return ""
}

func (x *DataMessageStanza) GetClientId() string {
	if x != nil && x.ClientId != nil {
		return *x.ClientId
	}
	return ""
}

func (x *DataMessageStanza) GetDeviceUserId() int64 {
	if x != nil && x.DeviceUserId != nil {
		return *x.DeviceUserId
	}
	return 0
}

func (x *DataMessageStanza) GetTtl() int32 {
	if x != nil && x.Ttl != nil {
		return *x.Ttl
	}
	return 0
}

func (x *DataMessageStanza) GetSent() int64 {
	if x != nil && x.Sent != nil {
		return *x.Sent
	}
	return 0
}

func (x *DataMessageStanza) GetQueued() int32 {
	if x != nil && x.Queued != nil {
		return *x.Queued
	}
	return 0
}

func (x *DataMessageStanza) GetStatus() int64 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *DataMessageStanza) GetRawData() []byte {
	if x != nil {
		return x.RawData
	}
	return nil
}

func (x *DataMessageStanza) GetDelay() int32 {
	if x != nil && x.Delay != nil {
		return *x.Delay
	}
	return 0
}

// *
// Included in IQ with ID 13, sent from client or server after 10 unconfirmed
// messages.
type StreamAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StreamAck) Reset() {
	*x = StreamAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mcs_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamAck) ProtoMessage() {}

func (x *StreamAck) ProtoReflect() protoreflect.Message {
	mi := &file_mcs_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamAck.ProtoReflect.Descriptor instead.
func (*StreamAck) Descriptor() ([]byte, []int) {
	return file_mcs_proto_rawDescGZIP(), []int{14}
}

// *
// Included in IQ sent after LoginResponse from server with ID 12.
type SelectiveAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id []string `protobuf:"bytes,1,rep,name=id" json:"id,omitempty"`
}

func (x *SelectiveAck) Reset() {
	*x = SelectiveAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mcs_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectiveAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectiveAck) ProtoMessage() {}

func (x *SelectiveAck) ProtoReflect() protoreflect.Message {
	mi := &file_mcs_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectiveAck.ProtoReflect.Descriptor instead.
func (*SelectiveAck) Descriptor() ([]byte, []int) {
	return file_mcs_proto_rawDescGZIP(), []int{15}
}

func (x *SelectiveAck) GetId() []string {
	if x != nil {
		return x.Id
	}
	return nil
}

var File_mcs_proto protoreflect.FileDescriptor

var file_mcs_proto_rawDesc = []byte{
	0x0a, 0x09, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x7b, 0x0a, 0x0d, 0x48,
	0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x7a, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x72,
	0x74, 0x62, 0x65, 0x61, 0x74, 0x41, 0x63, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x49, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x77, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x33, 0x0a,
	0x07, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x5a, 0x0a, 0x0d, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x08, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x73, 0x22, 0x63,
	0x0a, 0x0f, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x6d,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x4d, 0x73, 0x22, 0x9e, 0x05, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x72, 0x6d, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c,
	0x61, 0x73, 0x74, 0x52, 0x6d, 0x71, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x07, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2c,
	0x0a, 0x12, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x73, 0x12, 0x2d, 0x0a, 0x12,
	0x61, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65,
	0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x61, 0x64, 0x61, 0x70, 0x74, 0x69,
	0x76, 0x65, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x35, 0x0a, 0x0e, 0x68,
	0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x52, 0x0d, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x5f, 0x72, 0x6d, 0x71, 0x32, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x75, 0x73, 0x65, 0x52, 0x6d, 0x71, 0x32, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0c,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0b, 0x61,
	0x75, 0x74, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x1d, 0x0a, 0x0b, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x4e, 0x44, 0x52, 0x4f, 0x49, 0x44, 0x5f,
	0x49, 0x44, 0x10, 0x02, 0x22, 0xb3, 0x02, 0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6a, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6a, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x07, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x6c, 0x61,
	0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x12, 0x3b, 0x0a, 0x10, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x48,
	0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f,
	0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x29, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x3b, 0x0a, 0x11, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x6e, 0x7a, 0x61, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x07, 0x0a, 0x05, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x22, 0x2f, 0x0a, 0x09, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0xad, 0x03, 0x0a, 0x08, 0x49, 0x71, 0x53, 0x74, 0x61, 0x6e, 0x7a, 0x61, 0x12, 0x15,
	0x0a, 0x06, 0x72, 0x6d, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x72, 0x6d, 0x71, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x49, 0x71, 0x53, 0x74, 0x61, 0x6e, 0x7a, 0x61, 0x2e, 0x49,
	0x71, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12,
	0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12,
	0x20, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x28, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x70,
	0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x35, 0x0a,
	0x17, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14,
	0x6c, 0x61, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x34, 0x0a, 0x06, 0x49,
	0x71, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x45, 0x54, 0x10, 0x00, 0x12, 0x07,
	0x0a, 0x03, 0x53, 0x45, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x53, 0x55, 0x4c,
	0x54, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x51, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x03, 0x22, 0x31, 0x0a, 0x07, 0x41, 0x70, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x84, 0x05, 0x0a, 0x11, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x6e, 0x7a, 0x61, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x6d,
	0x71, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x72, 0x6d, 0x71, 0x49,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x18, 0x05, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x23, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x41, 0x70, 0x70, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x07, 0x61, 0x70, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x13,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x54,
	0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d,
	0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x35,
	0x0a, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64,
	0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x14, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x67, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x70, 0x6b, 0x67, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6b, 0x67, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61,
	0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x72, 0x61,
	0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x22, 0x0b, 0x0a, 0x09, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x63, 0x6b, 0x22, 0x1e, 0x0a, 0x0c, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x63, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x2a, 0xc1, 0x01, 0x0a, 0x06, 0x4d, 0x43, 0x53,
	0x54, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x43, 0x53, 0x5f, 0x48, 0x45, 0x41, 0x52, 0x54,
	0x42, 0x45, 0x41, 0x54, 0x5f, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x41, 0x47, 0x10, 0x00, 0x12,
	0x19, 0x0a, 0x15, 0x4d, 0x43, 0x53, 0x5f, 0x48, 0x45, 0x41, 0x52, 0x54, 0x42, 0x45, 0x41, 0x54,
	0x5f, 0x41, 0x43, 0x4b, 0x5f, 0x54, 0x41, 0x47, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x43,
	0x53, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f,
	0x54, 0x41, 0x47, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x43, 0x53, 0x5f, 0x4c, 0x4f, 0x47,
	0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x54, 0x41, 0x47, 0x10,
	0x03, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x43, 0x53, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x54,
	0x41, 0x47, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x43, 0x53, 0x5f, 0x49, 0x51, 0x5f, 0x53,
	0x54, 0x41, 0x4e, 0x5a, 0x41, 0x5f, 0x54, 0x41, 0x47, 0x10, 0x07, 0x12, 0x1f, 0x0a, 0x1b, 0x4d,
	0x43, 0x53, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x4e, 0x5a, 0x41, 0x5f, 0x54, 0x41, 0x47, 0x10, 0x08, 0x42, 0x4a, 0x0a, 0x16,
	0x6f, 0x72, 0x67, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x67, 0x2e, 0x67, 0x6d, 0x73, 0x2e, 0x67,
	0x63, 0x6d, 0x2e, 0x6d, 0x63, 0x73, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x42, 0x52, 0x55, 0x48, 0x49, 0x74, 0x73, 0x41, 0x42, 0x75, 0x6e, 0x6e, 0x79,
	0x2f, 0x67, 0x6f, 0x2d, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2d, 0x66, 0x69, 0x72, 0x65,
	0x62, 0x61, 0x73, 0x65, 0x2f, 0x61, 0x70, 0x69,
}

var (
	file_mcs_proto_rawDescOnce sync.Once
	file_mcs_proto_rawDescData = file_mcs_proto_rawDesc
)

func file_mcs_proto_rawDescGZIP() []byte {
	file_mcs_proto_rawDescOnce.Do(func() {
		file_mcs_proto_rawDescData = protoimpl.X.CompressGZIP(file_mcs_proto_rawDescData)
	})
	return file_mcs_proto_rawDescData
}

var file_mcs_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_mcs_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_mcs_proto_goTypes = []interface{}{
	(MCSTag)(0),                   // 0: MCSTag
	(LoginRequest_AuthService)(0), // 1: LoginRequest.AuthService
	(IqStanza_IqType)(0),          // 2: IqStanza.IqType
	(*HeartbeatPing)(nil),         // 3: HeartbeatPing
	(*HeartbeatAck)(nil),          // 4: HeartbeatAck
	(*ErrorInfo)(nil),             // 5: ErrorInfo
	(*Setting)(nil),               // 6: Setting
	(*HeartbeatStat)(nil),         // 7: HeartbeatStat
	(*HeartbeatConfig)(nil),       // 8: HeartbeatConfig
	(*LoginRequest)(nil),          // 9: LoginRequest
	(*LoginResponse)(nil),         // 10: LoginResponse
	(*StreamErrorStanza)(nil),     // 11: StreamErrorStanza
	(*Close)(nil),                 // 12: Close
	(*Extension)(nil),             // 13: Extension
	(*IqStanza)(nil),              // 14: IqStanza
	(*AppData)(nil),               // 15: AppData
	(*DataMessageStanza)(nil),     // 16: DataMessageStanza
	(*StreamAck)(nil),             // 17: StreamAck
	(*SelectiveAck)(nil),          // 18: SelectiveAck
}
var file_mcs_proto_depIdxs = []int32{
	13, // 0: ErrorInfo.extension:type_name -> Extension
	6,  // 1: LoginRequest.setting:type_name -> Setting
	7,  // 2: LoginRequest.heartbeat_stat:type_name -> HeartbeatStat
	1,  // 3: LoginRequest.auth_service:type_name -> LoginRequest.AuthService
	5,  // 4: LoginResponse.error:type_name -> ErrorInfo
	6,  // 5: LoginResponse.setting:type_name -> Setting
	8,  // 6: LoginResponse.heartbeat_config:type_name -> HeartbeatConfig
	2,  // 7: IqStanza.type:type_name -> IqStanza.IqType
	5,  // 8: IqStanza.error:type_name -> ErrorInfo
	13, // 9: IqStanza.extension:type_name -> Extension
	15, // 10: DataMessageStanza.app_data:type_name -> AppData
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_mcs_proto_init() }
func file_mcs_proto_init() {
	if File_mcs_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mcs_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartbeatPing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mcs_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartbeatAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mcs_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mcs_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Setting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mcs_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartbeatStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mcs_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartbeatConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mcs_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mcs_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mcs_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamErrorStanza); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mcs_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Close); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mcs_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Extension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mcs_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IqStanza); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mcs_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mcs_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataMessageStanza); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mcs_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mcs_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectiveAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mcs_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mcs_proto_goTypes,
		DependencyIndexes: file_mcs_proto_depIdxs,
		EnumInfos:         file_mcs_proto_enumTypes,
		MessageInfos:      file_mcs_proto_msgTypes,
	}.Build()
	File_mcs_proto = out.File
	file_mcs_proto_rawDesc = nil
	file_mcs_proto_goTypes = nil
	file_mcs_proto_depIdxs = nil
}
